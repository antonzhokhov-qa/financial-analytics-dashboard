import express from 'express'
import multer from 'multer'
import cors from 'cors'
import csv from 'csv-parser'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const app = express()
const port = 3002

// Middleware
app.use(cors())
app.use(express.json())

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({ dest: 'uploads/' })

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV
function parseCSVFile(filePath) {
  return new Promise((resolve, reject) => {
    const results = []
    fs.createReadStream(filePath)
      .pipe(csv({ separator: ';' }))
      .on('data', (data) => results.push(data))
      .on('end', () => {
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.unlinkSync(filePath)
        resolve(results)
      })
      .on('error', (error) => {
        fs.unlinkSync(filePath)
        reject(error)
      })
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
function detectDataType(headers) {
  const headerStr = headers.join(' ').toLowerCase()
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const platformKeywords = ['foreign operation id', 'client operation id', 'initial amount', 'result amount']
  const platformMatches = platformKeywords.filter(keyword => headerStr.includes(keyword)).length
  
  if (platformMatches >= 2) {
    return 'platform'
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  const merchantKeywords = ['tracking id', 'payment method', 'hash code']
  const merchantMatches = merchantKeywords.filter(keyword => headerStr.includes(keyword)).length
  
  if (merchantMatches >= 2) {
    return 'merchant'
  }
  
  return 'unknown'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
function normalizeStatus(status) {
  if (!status) return ''
  
  const normalized = status.toLowerCase().trim()
  
  // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
  const statusMap = {
    'success': 'success',
    'completed': 'success',
    'failed': 'failed',
    'error': 'failed',
    'canceled': 'failed',        // Canceled = Failed (–Ω–µ—É—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è)
    'cancelled': 'failed',       // Cancelled = Failed (–Ω–µ—É—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è)
    'pending': 'pending',
    'processing': 'pending',
    'in progress': 'pending',
    'in_progress': 'pending'
  }
  
  return statusMap[normalized] || normalized
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function performReconciliation(merchantData, platformData) {
  console.log('üîÑ Starting reconciliation...')
  console.log('üìä Merchant records:', merchantData.length)
  console.log('üè¶ Platform records:', platformData.length)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Ö–æ–¥–µ
  if (merchantData.length > 0) {
    console.log('üîç First merchant record in performReconciliation:', merchantData[0])
    console.log('üîç First merchant record keys:', Object.keys(merchantData[0]))
    console.log('üîç First merchant record Tracking Id:', merchantData[0]['Tracking Id'])
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
  const merchantIndex = {}
  const platformIndex = {}
  
  // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  merchantData.forEach((record, index) => {
    // –ò—â–µ–º –∫–ª—é—á Tracking Id —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –æ–±—ä–µ–∫—Ç–∞
    let trackingId = null
    let trackingKey = null
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–∞
    const possibleKeys = ['Tracking Id', 'Tracking ID', 'ID', 'tracking id', 'TrackingId', 'trackingId']
    
    for (const key of possibleKeys) {
      if (record[key]) {
        trackingId = record[key]
        trackingKey = key
        break
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –æ–±—ä–µ–∫—Ç–∞
    if (!trackingId) {
      const allKeys = Object.keys(record)
      for (const key of allKeys) {
        if (key.toLowerCase().includes('tracking') || key.toLowerCase().includes('id')) {
          trackingId = record[key]
          trackingKey = key
          break
        }
      }
    }
    
    // –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–≤—ã—Ö 5 –∑–∞–ø–∏—Å–µ–π
    if (index < 5) {
      console.log(`üîç Merchant row ${index + 1}:`, {
        'Found trackingId': trackingId,
        'Found trackingKey': trackingKey,
        'Status': record['Status'],
        'All keys': Object.keys(record),
        'First few keys with values': Object.keys(record).slice(0, 5).map(key => ({ key, value: record[key] }))
      })
    }
    
    if (trackingId) {
      merchantIndex[trackingId] = {
        ...record,
        trackingId,
        normalizedStatus: normalizeStatus(record['Status'] || record['–°—Ç–∞—Ç—É—Å'])
      }
    }
  })
  
  // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  platformData.forEach((record, index) => {
    // –ò—â–µ–º –∫–ª—é—á Foreign Operation Id —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –æ–±—ä–µ–∫—Ç–∞
    let foreignOpId = null
    let foreignOpKey = null
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–∞
    const possibleKeys = ['Foreign Operation Id', 'foreign operation id', 'ForeignOperationId', 'foreignOperationId']
    
    for (const key of possibleKeys) {
      if (record[key]) {
        foreignOpId = record[key]
        foreignOpKey = key
        break
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –æ–±—ä–µ–∫—Ç–∞
    if (!foreignOpId) {
      const allKeys = Object.keys(record)
      for (const key of allKeys) {
        if (key.toLowerCase().includes('foreign') && key.toLowerCase().includes('operation')) {
          foreignOpId = record[key]
          foreignOpKey = key
          break
        }
      }
    }
    
    if (foreignOpId) {
      platformIndex[foreignOpId] = {
        ...record,
        foreignOperationId: foreignOpId,
        normalizedStatus: normalizeStatus(record['Status'])
      }
    }
  })
  
  console.log('üìã Merchant index keys:', Object.keys(merchantIndex).length)
  console.log('üìã Platform index keys:', Object.keys(platformIndex).length)
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–µ—Ä–∫–∏
  const results = {
    matched: [],
    merchantOnly: [],
    platformOnly: [],
    statusMismatch: [],
    summary: {}
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  let processedCount = 0
  let matchedCount = 0
  
  Object.values(merchantIndex).forEach(merchantRecord => {
    processedCount++
    const platformRecord = platformIndex[merchantRecord.trackingId]
    
    // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 –∑–∞–ø–∏—Å–µ–π
    if (processedCount <= 10) {
      console.log(`üîç Processing merchant record ${processedCount}:`, {
        trackingId: merchantRecord.trackingId,
        merchantStatus: merchantRecord['Status'],
        merchantNormalizedStatus: merchantRecord.normalizedStatus,
        hasPlatformMatch: !!platformRecord,
        platformStatus: platformRecord?.['Status'],
        platformNormalizedStatus: platformRecord?.normalizedStatus
      })
    }
    
    if (!platformRecord) {
      // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      results.merchantOnly.push({
        id: merchantRecord.trackingId,
        merchantStatus: merchantRecord['Status'] || merchantRecord['–°—Ç–∞—Ç—É—Å'],
        merchantNormalizedStatus: merchantRecord.normalizedStatus,
        reconciliationStatus: 'merchant_only'
      })
    } else {
      // –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
      matchedCount++
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Å—É–º–º
      const statusMatch = merchantRecord.normalizedStatus === platformRecord.normalizedStatus
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—É–º–º—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const merchantAmount = parseFloat(merchantRecord['Amount'] || merchantRecord['Transaction amount'] || '0')
      const platformAmount = parseFloat(platformRecord['Initial Amount'] || platformRecord['Result Amount'] || '0')
      const amountMatch = Math.abs(merchantAmount - platformAmount) < 0.01 // –î–æ–ø—É—Å–∫ 1 –∫–æ–ø–µ–π–∫–∞
      
      if (statusMatch && amountMatch) {
        // –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ —Å—É–º–º–µ
        results.matched.push({
          id: merchantRecord.trackingId,
          merchantStatus: merchantRecord['Status'] || merchantRecord['–°—Ç–∞—Ç—É—Å'],
          platformStatus: platformRecord['Status'],
          merchantAmount: merchantAmount,
          platformAmount: platformAmount,
          merchantNormalizedStatus: merchantRecord.normalizedStatus,
          platformNormalizedStatus: platformRecord.normalizedStatus,
          reconciliationStatus: 'matched'
        })
      } else if (!statusMatch && !amountMatch) {
        // –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ —Å—É–º–º–µ
        results.statusMismatch.push({
          id: merchantRecord.trackingId,
          merchantStatus: merchantRecord['Status'] || merchantRecord['–°—Ç–∞—Ç—É—Å'],
          platformStatus: platformRecord['Status'],
          merchantAmount: merchantAmount,
          platformAmount: platformAmount,
          merchantNormalizedStatus: merchantRecord.normalizedStatus,
          platformNormalizedStatus: platformRecord.normalizedStatus,
          reconciliationStatus: 'status_and_amount_mismatch',
          issueType: 'status_and_amount'
        })
      } else if (!statusMatch) {
        // –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        results.statusMismatch.push({
          id: merchantRecord.trackingId,
          merchantStatus: merchantRecord['Status'] || merchantRecord['–°—Ç–∞—Ç—É—Å'],
          platformStatus: platformRecord['Status'],
          merchantAmount: merchantAmount,
          platformAmount: platformAmount,
          merchantNormalizedStatus: merchantRecord.normalizedStatus,
          platformNormalizedStatus: platformRecord.normalizedStatus,
          reconciliationStatus: 'status_mismatch',
          issueType: 'status_only'
        })
      } else {
        // –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Å—É–º–º–µ
        results.statusMismatch.push({
          id: merchantRecord.trackingId,
          merchantStatus: merchantRecord['Status'] || merchantRecord['–°—Ç–∞—Ç—É—Å'],
          platformStatus: platformRecord['Status'],
          merchantAmount: merchantAmount,
          platformAmount: platformAmount,
          merchantNormalizedStatus: merchantRecord.normalizedStatus,
          platformNormalizedStatus: platformRecord.normalizedStatus,
          reconciliationStatus: 'amount_mismatch',
          issueType: 'amount_only'
        })
      }
    }
  })
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–∏—â–µ–º –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ)
  Object.values(platformIndex).forEach(platformRecord => {
    if (!merchantIndex[platformRecord.foreignOperationId]) {
      // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
      results.platformOnly.push({
        id: platformRecord.foreignOperationId,
        platformStatus: platformRecord['Status'],
        platformNormalizedStatus: platformRecord.normalizedStatus,
        reconciliationStatus: 'platform_only'
      })
    }
  })
  
  console.log('üìä Processed merchant records:', processedCount)
  console.log('üîó Found matches:', matchedCount)
  
  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  results.summary = {
    totalMerchant: merchantData.length,
    totalPlatform: platformData.length,
    matched: results.matched.length,
    merchantOnly: results.merchantOnly.length,
    platformOnly: results.platformOnly.length,
    statusMismatch: results.statusMismatch.length,
    matchRate: ((results.matched.length / Math.max(merchantData.length, platformData.length)) * 100).toFixed(2) + '%'
  }
  
  console.log('‚úÖ Reconciliation complete:', results.summary)
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ –∑–∞–ø–∏—Å—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
  if (results.merchantOnly.length > 0) {
    console.log('üîç –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π —Ç–æ–ª—å–∫–æ —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:')
    results.merchantOnly.slice(0, 5).forEach((record, index) => {
      console.log(`  ${index + 1}. ID: ${record.id}, Status: ${record.merchantStatus}`)
    })
  }

  if (results.platformOnly.length > 0) {
    console.log('üîç –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ:')
    results.platformOnly.slice(0, 5).forEach((record, index) => {
      console.log(`  ${index + 1}. ID: ${record.id}, Status: ${record.platformStatus}`)
    })
  }
  
  return results
}

// API endpoint –¥–ª—è —Å–≤–µ—Ä–∫–∏
app.post('/api/reconcile', upload.fields([
  { name: 'merchantFile', maxCount: 1 },
  { name: 'platformFile', maxCount: 1 }
]), async (req, res) => {
  try {
    console.log('üìÅ Received files for reconciliation')
    
    if (!req.files.merchantFile || !req.files.platformFile) {
      return res.status(400).json({ error: 'Both merchant and platform files are required' })
    }
    
    const merchantFilePath = req.files.merchantFile[0].path
    const platformFilePath = req.files.platformFile[0].path
    
    console.log('üìÇ Parsing merchant file...')
    const merchantData = await parseCSVFile(merchantFilePath)
    console.log('üìÇ Parsing platform file...')
    const platformData = await parseCSVFile(platformFilePath)
    
    console.log('üìä Merchant data parsed:', merchantData.length, 'records')
    console.log('üìä Platform data parsed:', platformData.length, 'records')
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫
    if (merchantData.length > 0) {
      console.log('üîç MERCHANT HEADERS:', Object.keys(merchantData[0]))
      console.log('üìã MERCHANT FIRST 3 ROWS (raw):')
      merchantData.slice(0, 3).forEach((row, index) => {
        console.log(`  Row ${index + 1}:`, JSON.stringify(row, null, 2))
      })
    }
    
    if (platformData.length > 0) {
      console.log('üîç PLATFORM HEADERS:', Object.keys(platformData[0]))
      console.log('üìã PLATFORM FIRST 3 ROWS (raw):')
      platformData.slice(0, 3).forEach((row, index) => {
        console.log(`  Row ${index + 1}:`, JSON.stringify(row, null, 2))
      })
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    const merchantHeaders = Object.keys(merchantData[0] || {})
    const platformHeaders = Object.keys(platformData[0] || {})
    
    const merchantType = detectDataType(merchantHeaders)
    const platformType = detectDataType(platformHeaders)
    
    console.log('üîç Detected types - Merchant:', merchantType, 'Platform:', platformType)
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤–µ—Ä–∫—É
    console.log('üîç About to call performReconciliation with:', {
      merchantDataLength: merchantData.length,
      platformDataLength: platformData.length,
      merchantDataFirstRecord: merchantData[0],
      platformDataFirstRecord: platformData[0]
    })
    
    const reconciliationResults = performReconciliation(merchantData, platformData)
    
    res.json({
      success: true,
      results: reconciliationResults,
      metadata: {
        merchantType,
        platformType,
        merchantHeaders,
        platformHeaders
      }
    })
    
  } catch (error) {
    console.error('‚ùå Reconciliation error:', error)
    res.status(500).json({ 
      error: 'Reconciliation failed', 
      details: error.message 
    })
  }
})

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() })
})

// –î–ª—è Vercel –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (process.env.NODE_ENV !== 'production') {
  app.listen(port, () => {
    console.log(`üöÄ Reconciliation server running on port ${port}`)
    console.log(`üìä Health check: http://localhost:${port}/api/health`)
    console.log(`üîÑ Reconciliation endpoint: http://localhost:${port}/api/reconcile`)
  })
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è Vercel
export default app 