import { useState } from 'react'
import { parseCSV, parseCSVAlternative } from '../utils/csvParser'

function CSVDebugger({ csvText, onDataParsed }) {
  const [selectedParser, setSelectedParser] = useState('main')
  const [parsedData, setParsedData] = useState(null)

  const testParser = (parserType) => {
    let data
    if (parserType === 'main') {
      data = parseCSV(csvText)
    } else {
      data = parseCSVAlternative(csvText)
    }
    setParsedData(data)
    if (data.length > 0) {
      onDataParsed(data)
    }
  }

  if (!csvText) return null

  // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
  const lines = csvText.split('\n')
  const hasNewlines = lines.length > 1
  const hasCarriageReturn = csvText.includes('\r')
  const idPattern = /01981[0-9a-f]{32}/g
  const idMatches = csvText.match(idPattern)
  const idCount = idMatches ? idMatches.length : 0

  return (
    <div className="glass rounded-xl p-6 mb-6">
      <h3 className="text-lg font-semibold mb-4">üîß –û—Ç–ª–∞–¥–∫–∞ CSV</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div>
          <h4 className="font-medium mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:</h4>
          <div className="text-sm text-gray-600 space-y-1">
            <p>–†–∞–∑–º–µ—Ä: {csvText.length} —Å–∏–º–≤–æ–ª–æ–≤</p>
            <p>–°—Ç—Ä–æ–∫ (–ø–æ \\n): {lines.length}</p>
            <p>–ï—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫: {hasNewlines ? '–î–∞' : '–ù–µ—Ç'}</p>
            <p>–ï—Å—Ç—å \\r: {hasCarriageReturn ? '–î–∞' : '–ù–µ—Ç'}</p>
            <p>–ù–∞–π–¥–µ–Ω–æ ID –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {idCount}</p>
            <p>–°–æ–¥–µ—Ä–∂–∏—Ç ";"?: {csvText.includes(';') ? '–î–∞' : '–ù–µ—Ç'}</p>
            <p>–°–æ–¥–µ—Ä–∂–∏—Ç ","?: {csvText.includes(',') ? '–î–∞' : '–ù–µ—Ç'}</p>
          </div>
        </div>
        
        <div>
          <h4 className="font-medium mb-2">–ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤:</h4>
          <div className="text-xs font-mono bg-gray-100 p-2 rounded max-h-32 overflow-y-auto">
            {csvText.substring(0, 300)}...
          </div>
        </div>
      </div>

      {!hasNewlines && idCount > 1 && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4">
          <p className="text-yellow-800 text-sm">
            ‚ö†Ô∏è <strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞:</strong> –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {idCount} –∑–∞–ø–∏—Å–µ–π, –Ω–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. 
            –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
          </p>
        </div>
      )}

      <div className="flex gap-2 mb-4">
        <button
          onClick={() => testParser('main')}
          className={`px-4 py-2 rounded ${selectedParser === 'main' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
        >
          –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä
        </button>
        <button
          onClick={() => testParser('alternative')}
          className={`px-4 py-2 rounded ${selectedParser === 'alternative' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
        >
          –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        </button>
      </div>

      {parsedData && (
        <div>
          <h4 className="font-medium mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:</h4>
          <div className="text-sm text-gray-600 space-y-1">
            <p>–°—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <span className="font-semibold">{parsedData.length}</span></p>
            {parsedData.length > 0 && (
              <>
                <p>–ó–∞–≥–æ–ª–æ–≤–∫–∏: {Object.keys(parsedData[0]).join(', ')}</p>
                <div className="mt-2">
                  <p className="font-medium">–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</p>
                  <pre className="text-xs bg-gray-100 p-2 rounded mt-1 max-h-40 overflow-y-auto">
                    {JSON.stringify(parsedData[0], null, 2)}
                  </pre>
                </div>
                {parsedData.length > 1 && (
                  <div className="mt-2">
                    <p className="font-medium">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:</p>
                    <div className="text-xs bg-blue-50 p-2 rounded mt-1">
                      {(() => {
                        const statusCounts = {}
                        parsedData.forEach(row => {
                          const status = row.Status || '–ø—É—Å—Ç–æ'
                          statusCounts[status] = (statusCounts[status] || 0) + 1
                        })
                        return Object.entries(statusCounts).map(([status, count]) => (
                          <div key={status}>{status}: {count}</div>
                        ))
                      })()}
                    </div>
                  </div>
                )}
              </>
            )}
          </div>
        </div>
      )}
    </div>
  )
}

export default CSVDebugger 