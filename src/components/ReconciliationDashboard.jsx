import React, { useState } from 'react'
import ReconciliationUpload from './ReconciliationUpload'
import ReconciliationResults from './ReconciliationResults'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–≤–µ—Ä–∫–∏
function formatReconciliationForTable(reconciliationResults) {
  const allRecords = []

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Å—Å–∏–≤—ã
  if (!reconciliationResults || typeof reconciliationResults !== 'object') {
    console.error('‚ùå Invalid reconciliation results:', reconciliationResults)
    return []
  }

  const { matched = [], statusMismatch = [], merchantOnly = [], platformOnly = [] } = reconciliationResults

  console.log('üìã Formatting data:', {
    matched: matched.length,
    statusMismatch: statusMismatch.length,
    merchantOnly: merchantOnly.length,
    platformOnly: platformOnly.length
  })

  // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 - —Å–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
  merchantOnly.forEach(merchant => {
    allRecords.push({
      id: merchant.id,
      merchantId: merchant.id,
      platformId: null,
      merchantStatus: merchant.merchantStatus,
      platformStatus: null,
      merchantData: { status: merchant.merchantStatus, id: merchant.id },
      platformData: null,
      reconciliationStatus: 'merchant_only',
      matchType: 'no_match',
      hasIssue: true,
      issueType: 'missing_platform'
    })
  })

  // –ó–∞—Ç–µ–º –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2)
  platformOnly.forEach(platform => {
    allRecords.push({
      id: platform.id,
      merchantId: null,
      platformId: platform.id,
      merchantStatus: null,
      platformStatus: platform.platformStatus,
      merchantData: null,
      platformData: { status: platform.platformStatus, id: platform.id },
      reconciliationStatus: 'platform_only',
      matchType: 'no_match',
      hasIssue: true,
      issueType: 'missing_merchant'
    })
  })

  // –ó–∞—Ç–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏–ª–∏ —Å—É–º–º–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
  statusMismatch.forEach(mismatch => {
    allRecords.push({
      id: mismatch.id,
      merchantId: mismatch.id,
      platformId: mismatch.id,
      merchantStatus: mismatch.merchantStatus,
      platformStatus: mismatch.platformStatus,
      merchantAmount: mismatch.merchantAmount,
      platformAmount: mismatch.platformAmount,
      merchantData: { 
        status: mismatch.merchantStatus, 
        id: mismatch.id,
        amount: mismatch.merchantAmount 
      },
      platformData: { 
        status: mismatch.platformStatus, 
        id: mismatch.id,
        amount: mismatch.platformAmount 
      },
      reconciliationStatus: mismatch.reconciliationStatus || 'status_mismatch',
      matchType: mismatch.issueType || 'status_mismatch',
      hasIssue: true,
      issueType: mismatch.issueType || 'status'
    })
  })

  // –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4 - —Å–∞–º—ã–µ —Ö–æ—Ä–æ—à–∏–µ)
  matched.forEach(match => {
    allRecords.push({
      id: match.id,
      merchantId: match.id,
      platformId: match.id,
      merchantStatus: match.merchantStatus,
      platformStatus: match.platformStatus,
      merchantAmount: match.merchantAmount,
      platformAmount: match.platformAmount,
      merchantData: { 
        status: match.merchantStatus, 
        id: match.id,
        amount: match.merchantAmount 
      },
      platformData: { 
        status: match.platformStatus, 
        id: match.id,
        amount: match.platformAmount 
      },
      reconciliationStatus: 'matched',
      matchType: 'full_match',
      hasIssue: false
    })
  })

  console.log('‚úÖ Formatted records:', allRecords.length)
  return allRecords
}

const ReconciliationDashboard = () => {
  const [currentStep, setCurrentStep] = useState('upload') // 'upload' | 'results'
  const [reconciliationData, setReconciliationData] = useState(null)
  const [isProcessing, setIsProcessing] = useState(false)

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const handleFilesUploaded = async (filesData) => {
    setIsProcessing(true)
    console.log('üîÑ Processing reconciliation results...', filesData)

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (!filesData || !filesData.results || !filesData.results.results) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
      }

      // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      const { results, metadata } = filesData.results
      
      console.log('üìä Raw results from server:', results)
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
      const formattedData = formatReconciliationForTable(results)

      console.log('‚úÖ Reconciliation completed:', {
        totalRecords: formattedData.length,
        summary: results.summary,
        formattedDataSample: formattedData.slice(0, 3)
      })

      setReconciliationData({
        formattedData,
        rawResults: results,
        metadata,
        fileNames: {
          merchant: filesData.merchantFileName,
          platform: filesData.platformFileName
        }
      })

      setCurrentStep('results')
    } catch (error) {
      console.error('‚ùå Reconciliation error:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–≤–µ—Ä–∫–∏: ' + error.message)
    } finally {
      setIsProcessing(false)
    }
  }

  // –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤
  const handleBackToUpload = () => {
    setCurrentStep('upload')
    setReconciliationData(null)
  }

  if (isProcessing) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white rounded-lg shadow-lg p-8 text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-600 mx-auto mb-4"></div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–≤–µ—Ä–∫–∞...
          </h2>
          <p className="text-gray-600">
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∏—â–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
          </p>
          
          <div className="mt-6 bg-gray-50 rounded-lg p-4">
            <div className="text-sm text-gray-600 space-y-1">
              <div>‚úÖ –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã</div>
              <div>üîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞...</div>
              <div>üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π...</div>
              <div>üéØ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π...</div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  switch (currentStep) {
    case 'upload':
      return <ReconciliationUpload onFilesUploaded={handleFilesUploaded} />
    
    case 'results':
      return (
        <ReconciliationResults
          reconciliationData={reconciliationData.formattedData}
          rawResults={reconciliationData.rawResults}
          fileNames={reconciliationData.fileNames}
          onBack={handleBackToUpload}
        />
      )
    
    default:
      return <ReconciliationUpload onFilesUploaded={handleFilesUploaded} />
  }
}

export default ReconciliationDashboard 