// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å backend API –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
class BigFileApiService {
  constructor() {
    this.baseURL = process.env.NODE_ENV === 'production' 
      ? 'https://your-api-domain.com' 
      : 'http://localhost:3001'
    this.wsURL = process.env.NODE_ENV === 'production' 
      ? 'wss://your-api-domain.com:8080' 
      : 'ws://localhost:8080'
    this.ws = null
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  async uploadFile(file, provider = 'optipay', onProgress = null) {
    try {
      console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', file.name, '–ü—Ä–æ–≤–∞–π–¥–µ—Ä:', provider)

      const formData = new FormData()
      formData.append('csvFile', file)
      formData.append('provider', provider)

      const response = await fetch(`${this.baseURL}/api/analytics/upload`, {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞')
      }

      const result = await response.json()
      console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–ª—É—á–µ–Ω jobId:', result.jobId)

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      if (onProgress) {
        this.subscribeToProgress(result.jobId, onProgress)
      }

      return result

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error)
      throw error
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ WebSocket
  subscribeToProgress(jobId, onProgress) {
    try {
      this.ws = new WebSocket(this.wsURL)

      this.ws.onopen = () => {
        console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏:', jobId)
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        this.ws.send(JSON.stringify({
          type: 'subscribe',
          jobId: jobId
        }))
      }

      this.ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data)
          if (data.jobId === jobId && onProgress) {
            onProgress(data.progress)
          }
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', e)
        }
      }

      this.ws.onerror = (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error)
      }

      this.ws.onclose = () => {
        console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω')
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket:', error)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  async getJobStatus(jobId) {
    try {
      const response = await fetch(`${this.baseURL}/api/analytics/job/${jobId}/status`)
      
      if (!response.ok) {
        throw new Error('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }

      return await response.json()
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error)
      throw error
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async getJobResults(jobId, page = 1, limit = 100) {
    try {
      const response = await fetch(
        `${this.baseURL}/api/analytics/job/${jobId}/results?page=${page}&limit=${limit}`
      )
      
      if (!response.ok) {
        throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã')
      }

      return await response.json()
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error)
      throw error
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
  async healthCheck() {
    try {
      const response = await fetch(`${this.baseURL}/api/health`)
      return await response.json()
    } catch (error) {
      console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error)
      return { status: 'error', error: error.message }
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  disconnect() {
    if (this.ws) {
      this.ws.close()
      this.ws = null
    }
  }

  // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  static formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  static formatProcessingTime(milliseconds) {
    if (milliseconds < 1000) return `${milliseconds}–º—Å`
    if (milliseconds < 60000) return `${(milliseconds / 1000).toFixed(1)}—Å`
    return `${(milliseconds / 60000).toFixed(1)}–º–∏–Ω`
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const bigFileApi = new BigFileApiService()
export default bigFileApi 