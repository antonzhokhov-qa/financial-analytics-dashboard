// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
export const calculateMetrics = (data, dataTypeOrProvider = 'merchant') => {
  if (!data || data.length === 0) return null

  console.log('üìä –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö:', {
    length: data.length,
    providerOrType: dataTypeOrProvider,
    sampleData: data.slice(0, 2)
  })

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –≤–∞–ª—é—Ç—É
  let provider = null
  let currency = 'TRY' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const currencyStats = {}
  data.forEach(item => {
    if (item.currency) {
      currencyStats[item.currency] = (currencyStats[item.currency] || 0) + 1
    }
  })
  
  // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â—É—é—Å—è –≤–∞–ª—é—Ç—É
  if (Object.keys(currencyStats).length > 0) {
    currency = Object.keys(currencyStats).reduce((a, b) => 
      currencyStats[a] > currencyStats[b] ? a : b
    )
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  if (dataTypeOrProvider === 'paylab' || data.some(item => item.provider === 'paylab' || item.company === 'paylab' || item.project === 'paylab')) {
    provider = 'paylab'
    // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º EUR –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç –¥–ª—è Paylab
    if (!Object.keys(currencyStats).length) currency = 'EUR'
  } else if (dataTypeOrProvider === 'payshack' || data.some(item => item.provider === 'payshack')) {
    provider = 'payshack'
    if (!Object.keys(currencyStats).length) currency = 'INR'
  } else if (dataTypeOrProvider === 'optipay' || data.some(item => item.provider === 'optipay')) {
    provider = 'optipay' 
    if (!Object.keys(currencyStats).length) currency = 'TRY'
  } else if (data.some(item => item.currency)) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–ª—é—Ç—É –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –≤–∞–ª—é—Ç–æ–π
    const itemWithCurrency = data.find(item => item.currency)
    currency = itemWithCurrency.currency
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –≤–∞–ª—é—Ç–µ
    if (currency === 'INR') provider = 'payshack'
    else if (currency === 'TRY') provider = 'optipay'
    else if (currency === 'EUR' || currency === 'USD') provider = 'paylab'
  }

  console.log('üí∞ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: –ø—Ä–æ–≤–∞–π–¥–µ—Ä =', provider, ', –≤–∞–ª—é—Ç–∞ =', currency)

  const total = data.length

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  const isSuccessful = (item) => {
    const status = (item.status || '').toLowerCase()
    if (provider === 'payshack') {
      return status === 'success' || status === 'completed'
    } else {
      return item.isCompleted || status === 'completed' || status === 'success'
    }
  }

  const isFailed = (item) => {
    const status = (item.status || '').toLowerCase()
    if (provider === 'payshack') {
      return status === 'failed' || status === 'cancelled'
    } else {
      return item.isFailed || status === 'failed' || status === 'canceled'
    }
  }

  const isPending = (item) => {
    const status = (item.status || '').toLowerCase()
    if (provider === 'payshack') {
      return status === 'initiated' || status === 'pending'
    } else {
      return item.isPending || status === 'in progress' || status === 'pending'
    }
  }

  const isCanceled = (item) => {
    const status = (item.status || '').toLowerCase()
    return status === 'canceled' || status === 'cancelled'
  }

  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  const successful = data.filter(isSuccessful).length
  const failed = data.filter(isFailed).length  
  const pending = data.filter(isPending).length
  const canceled = data.filter(isCanceled).length

  const conversionRate = total > 0 ? (successful / total) * 100 : 0

  // –†–∞—Å—á–µ—Ç –≤—ã—Ä—É—á–∫–∏
  const successfulRevenue = data.filter(isSuccessful)
    .reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0)
  
  const lostRevenue = data.filter(item => isFailed(item) || isCanceled(item))
    .reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0)
  
  const totalAmount = data.reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0)
  const averageAmount = total > 0 ? totalAmount / total : 0

  // –ö–æ–º–∏—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö)
  const totalFees = data.reduce((sum, item) => sum + (parseFloat(item.fees || item.fee || 0)), 0)

  // –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
  const paymentMethodStats = {}
  data.forEach(item => {
    const method = item.paymentMethod || item.paymentMethodCode || item.paymentProduct || 'Unknown'
    if (!paymentMethodStats[method]) {
      paymentMethodStats[method] = { total: 0, successful: 0, failed: 0, pending: 0, revenue: 0, completed: 0 }
    }
    
    paymentMethodStats[method].total++
    paymentMethodStats[method].revenue += parseFloat(item.amount) || 0
    
    if (isSuccessful(item)) {
      paymentMethodStats[method].successful++
      paymentMethodStats[method].completed++
    } else if (isFailed(item)) {
      paymentMethodStats[method].failed++
    } else if (isPending(item)) {
      paymentMethodStats[method].pending++
    }
  })

  // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è provider–æ–≤ —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏)
  const companyStats = {}
  if (provider === 'optipay') {
    data.forEach(item => {
      const company = item.company || item.project || 'Unknown'
      if (!companyStats[company]) {
        companyStats[company] = { total: 0, successful: 0, failed: 0, pending: 0, revenue: 0, completed: 0 }
      }
      
      companyStats[company].total++
      companyStats[company].revenue += parseFloat(item.amount) || 0
      
      if (isSuccessful(item)) {
        companyStats[company].successful++
        companyStats[company].completed++
      } else if (isFailed(item)) {
        companyStats[company].failed++
      } else if (isPending(item)) {
        companyStats[company].pending++
      }
    })
  }

  const result = {
    total,
    successful,
    failed,
    pending,
    canceled,
    conversionRate,
    successfulRevenue,
    lostRevenue,
    totalAmount,
    totalRevenue: totalAmount,
    averageAmount,
    totalFees,
    paymentMethodStats,
    companyStats,
    provider,
    currency,
    // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    completed: successful
  }

  console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã:', {
    total: result.total,
    successful: result.successful,
    conversionRate: result.conversionRate.toFixed(2) + '%',
    currency: result.currency,
    provider: result.provider,
    revenue: result.successfulRevenue
  })

  return result
}

export function generateInsights(data, metrics) {
  const insights = []
  const { dataType } = metrics
  
  if (metrics.conversionRate < 50) {
    insights.push({
      type: 'warning',
      icon: '‚ö†Ô∏è',
      text: `–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: ${metrics.conversionRate.toFixed(1)}%. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–∞–∑–æ–≤.`
    })
  } else if (metrics.conversionRate > 80) {
    insights.push({
      type: 'success',
      icon: 'üéâ',
      text: `–û—Ç–ª–∏—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: ${metrics.conversionRate.toFixed(1)}%. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.`
    })
  }
  
  // –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
  if (dataType === 'merchant' && metrics.canceled > 0) {
    const cancelRate = (metrics.canceled / metrics.total) * 100
    insights.push({
      type: 'info',
      icon: '‚è∏Ô∏è',
      text: `${metrics.canceled} –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (${cancelRate.toFixed(1)}%). –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —É–ª—É—á—à–∏—Ç—å UX.`
    })
  }
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
  if (dataType === 'merchant' && Object.keys(metrics.companyStats).length > 0) {
    const topCompany = Object.entries(metrics.companyStats)
      .sort(([,a], [,b]) => b.revenue - a.revenue)[0]
    
    if (topCompany) {
      insights.push({
        type: 'info',
        icon: 'üè¢',
        text: `–¢–æ–ø –∫–æ–º–ø–∞–Ω–∏—è: ${topCompany[0]} —Å –≤—ã—Ä—É—á–∫–æ–π ${topCompany[1].revenue.toLocaleString('tr-TR')} TRY`
      })
    }
  }
  
  // –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
  const topMethod = Object.entries(metrics.paymentMethodStats)
    .sort(([,a], [,b]) => b.total - a.total)[0]
  
  if (topMethod) {
    const methodConversion = (topMethod[1].completed / topMethod[1].total) * 100
    insights.push({
      type: 'info',
      icon: 'üí≥',
      text: `–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–µ—Ç–æ–¥: ${topMethod[0]} (${methodConversion.toFixed(1)}% –∫–æ–Ω–≤–µ—Ä—Å–∏—è)`
    })
  }
  
  const highValueOperations = data.filter(row => parseFloat(row.amount) > metrics.averageAmount * 2).length
  if (highValueOperations > 0) {
    insights.push({
      type: 'info',
      icon: 'üíé',
      text: `${highValueOperations} –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é (>${(metrics.averageAmount * 2).toLocaleString('tr-TR', {maximumFractionDigits: 0})} TRY).`
    })
  }
  
  insights.push({
    type: 'info',
    icon: 'üí∞',
    text: `–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${metrics.successfulRevenue.toLocaleString('tr-TR')} TRY, –∫–æ–º–∏—Å—Å–∏–∏: ${metrics.totalFees.toLocaleString('tr-TR')} TRY`
  })
  
  return insights
}

export function getAmountRanges(data) {
  const ranges = {
    '0-500': 0,
    '501-1000': 0,
    '1001-2000': 0,
    '2001-5000': 0,
    '5000+': 0
  }
  
  data.forEach(row => {
    const amount = parseFloat(row.amount) || 0
    if (amount <= 500) ranges['0-500']++
    else if (amount <= 1000) ranges['501-1000']++
    else if (amount <= 2000) ranges['1001-2000']++
    else if (amount <= 5000) ranges['2001-5000']++
    else ranges['5000+']++
  })
  
  return ranges
}

export function getConversionByAmount(data, dataType = 'merchant') {
  const ranges = [
    { label: '0-500', min: 0, max: 500 },
    { label: '501-1000', min: 501, max: 1000 },
    { label: '1001-2000', min: 1001, max: 2000 },
    { label: '2001-5000', min: 2001, max: 5000 },
    { label: '5000+', min: 5001, max: Infinity }
  ]
  
  return ranges.map(range => {
    const rangeData = data.filter(row => {
      const amount = parseFloat(row.amount) || 0
      return amount >= range.min && amount <= range.max
    })
    
    const total = rangeData.length
    const successful = rangeData.filter(row => {
      const status = row.status ? row.status.toLowerCase() : ''
      return dataType === 'merchant' ? status === 'completed' : status === 'success'
    }).length
    
    return {
      range: range.label,
      total,
      successful,
      conversion: total > 0 ? (successful / total) * 100 : 0
    }
  })
}

export function getTopAmounts(data, limit = 10) {
  const amounts = data.map(row => parseFloat(row.amount) || 0)
  return amounts.sort((a, b) => b - a).slice(0, limit)
}

export function getStatusDistribution(data, dataType = 'merchant') {
  const statuses = {}
  data.forEach(row => {
    const status = row.status || 'unknown'
    statuses[status] = (statuses[status] || 0) + 1
  })
  return statuses
}

export function getCompanyDistribution(data) {
  const companies = {}
  data.forEach(row => {
    const company = row.company || 'Unknown'
    companies[company] = (companies[company] || 0) + 1
  })
  return companies
}

export function getPaymentMethodDistribution(data) {
  const methods = {}
  data.forEach(row => {
    const method = row.paymentMethod || 'Unknown'
    methods[method] = (methods[method] || 0) + 1
  })
  return methods
}

export function getTimeSeriesData(data) {
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const timeGroups = {}
  
  data.forEach(row => {
    let date
    if (row.createdAt) {
      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
      const dateStr = row.createdAt.split(' ')[0] // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
      date = dateStr
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
      date = new Date().toISOString().split('T')[0]
    }
    
    if (!timeGroups[date]) {
      timeGroups[date] = { total: 0, completed: 0, failed: 0, canceled: 0, revenue: 0 }
    }
    
    timeGroups[date].total++
    timeGroups[date].revenue += parseFloat(row.amount) || 0
    
    const status = row.status ? row.status.toLowerCase() : ''
    if (status === 'completed' || status === 'success') {
      timeGroups[date].completed++
    } else if (status === 'failed' || status === 'fail') {
      timeGroups[date].failed++
    } else if (status === 'canceled') {
      timeGroups[date].canceled++
    }
  })
  
  return Object.entries(timeGroups).map(([date, stats]) => ({
    date,
    ...stats,
    conversionRate: (stats.completed / stats.total) * 100
  }))
}

export function getTopUsers(data, limit = 10) {
  const userStats = {}
  
  data.forEach(row => {
    const userId = row.userId || 'Unknown'
    const userName = row.userName || row.fullName || 'Unknown'
    
    if (!userStats[userId]) {
      userStats[userId] = {
        id: userId,
        name: userName,
        total: 0,
        completed: 0,
        failed: 0,
        canceled: 0,
        totalAmount: 0
      }
    }
    
    userStats[userId].total++
    userStats[userId].totalAmount += parseFloat(row.amount) || 0
    
    const status = row.status ? row.status.toLowerCase() : ''
    if (status === 'completed' || status === 'success') userStats[userId].completed++
    else if (status === 'failed' || status === 'fail') userStats[userId].failed++
    else if (status === 'canceled') userStats[userId].canceled++
  })
  
  return Object.values(userStats)
    .sort((a, b) => b.totalAmount - a.totalAmount)
    .slice(0, limit)
}

export function detectAnomalies(data) {
  const anomalies = []
  
  // –ê–Ω–æ–º–∞–ª–∏–∏ –ø–æ —Å—É–º–º–∞–º
  const amounts = data.map(row => parseFloat(row.amount) || 0)
  const mean = amounts.reduce((a, b) => a + b, 0) / amounts.length
  const std = Math.sqrt(amounts.reduce((sq, n) => sq + Math.pow(n - mean, 2), 0) / amounts.length)
  
  data.forEach((row, index) => {
    const amount = parseFloat(row.amount) || 0
    if (amount > mean + 2 * std) {
      anomalies.push({
        type: 'high_amount',
        row: index + 1,
        value: amount,
        description: `–ù–µ–æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–∞—è —Å—É–º–º–∞: ${amount.toLocaleString('ru-RU')}`
      })
    }
  })
  
  // –ê–Ω–æ–º–∞–ª–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  data.forEach((row, index) => {
    if (row.createdAt && row.processedAt) {
      const created = new Date(row.createdAt)
      const processed = new Date(row.processedAt)
      const processingTime = processed - created
      
      // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç
      if (processingTime > 30 * 60 * 1000) {
        anomalies.push({
          type: 'slow_processing',
          row: index + 1,
          value: processingTime / (60 * 1000),
          description: `–ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${Math.round(processingTime / (60 * 1000))} –º–∏–Ω—É—Ç`
        })
      }
    }
  })
  
  return anomalies
} 

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è Enhanced API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç–∏
export const calculateEnhancedMetrics = (data, dataSource = 'enhanced-api') => {
  if (!data || data.length === 0) return null

  console.log('üöÄ –†–∞—Å—á–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è Enhanced API:', {
    length: data.length,
    dataSource: dataSource,
    sampleData: data.slice(0, 2)
  })

  // –ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
  const currencyBreakdown = {}
  const merchantBreakdown = {}
  
  data.forEach(item => {
    const currency = item.currency || 'UNKNOWN'
    const merchant = item.project || item.company || 'UNKNOWN'
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –≤–∞–ª—é—Ç–∞–º
    if (!currencyBreakdown[currency]) {
      currencyBreakdown[currency] = {
        total: 0,
        successful: 0,
        failed: 0,
        pending: 0,
        totalAmount: 0,
        successfulRevenue: 0,
        lostRevenue: 0,
        merchants: new Set()
      }
    }
    
    const currencyData = currencyBreakdown[currency]
    currencyData.total++
    currencyData.totalAmount += parseFloat(item.amount) || 0
    currencyData.merchants.add(merchant)
    
    if (item.isCompleted) {
      currencyData.successful++
      currencyData.successfulRevenue += parseFloat(item.amount) || 0
    } else if (item.isFailed) {
      currencyData.failed++
      currencyData.lostRevenue += parseFloat(item.amount) || 0
    } else if (item.isInProcess) {
      currencyData.pending++
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Ä—á–∞–Ω—Ç–∞–º
    if (!merchantBreakdown[merchant]) {
      merchantBreakdown[merchant] = {
        total: 0,
        successful: 0,
        failed: 0,
        pending: 0,
        totalAmount: 0,
        successfulRevenue: 0,
        currencies: new Set()
      }
    }
    
    const merchantData = merchantBreakdown[merchant]
    merchantData.total++
    merchantData.totalAmount += parseFloat(item.amount) || 0
    merchantData.currencies.add(currency)
    
    if (item.isCompleted) {
      merchantData.successful++
      merchantData.successfulRevenue += parseFloat(item.amount) || 0
    } else if (item.isFailed) {
      merchantData.failed++
    } else if (item.isInProcess) {
      merchantData.pending++
    }
  })

  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–æ–±—â–∏–µ)
  const total = data.length
  const successful = data.filter(item => item.isCompleted).length
  const failed = data.filter(item => item.isFailed).length
  const pending = data.filter(item => item.isInProcess).length
  const conversionRate = total > 0 ? (successful / total) * 100 : 0

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É (–Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â—É—é—Å—è)
  const mainCurrency = Object.keys(currencyBreakdown).reduce((a, b) => 
    currencyBreakdown[a].total > currencyBreakdown[b].total ? a : b
  ) || 'TRY'

  // –û–±—â–∏–µ —Å—É–º–º—ã
  const totalAmount = data.reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0)
  const successfulRevenue = data.filter(item => item.isCompleted)
    .reduce((sum, item) => sum + (parseFloat(item.amount) || 0), 0)
  const averageAmount = total > 0 ? totalAmount / total : 0

  console.log('üí∞ –ê–Ω–∞–ª–∏–∑ –≤–∞–ª—é—Ç –≤ Enhanced API:', {
    mainCurrency: mainCurrency,
    currenciesFound: Object.keys(currencyBreakdown),
    merchantsFound: Object.keys(merchantBreakdown),
    currencyBreakdown: Object.keys(currencyBreakdown).map(curr => ({
      currency: curr,
      total: currencyBreakdown[curr].total,
      amount: currencyBreakdown[curr].totalAmount.toFixed(2),
      merchants: Array.from(currencyBreakdown[curr].merchants)
    }))
  })

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total,
    successful,
    failed,
    pending,
    canceled: 0, // –í Enhanced API –æ–±—ã—á–Ω–æ –Ω–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö
    conversionRate,
    
    // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏  
    totalAmount,
    successfulRevenue,
    lostRevenue: totalAmount - successfulRevenue,
    averageAmount,
    totalFees: 0, // –ü–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –≤ Enhanced API
    
    // –í–∞–ª—é—Ç–∞ –∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    currency: mainCurrency,
    dataType: 'enhanced-api',
    provider: 'enhanced-api',
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    currencyBreakdown: Object.keys(currencyBreakdown).map(currency => ({
      currency,
      ...currencyBreakdown[currency],
      merchants: Array.from(currencyBreakdown[currency].merchants),
      conversionRate: currencyBreakdown[currency].total > 0 
        ? (currencyBreakdown[currency].successful / currencyBreakdown[currency].total * 100).toFixed(2) + '%'
        : '0%'
    })),
    
    merchantBreakdown: Object.keys(merchantBreakdown).map(merchant => ({
      merchant,
      ...merchantBreakdown[merchant],
      currencies: Array.from(merchantBreakdown[merchant].currencies),
      conversionRate: merchantBreakdown[merchant].total > 0
        ? (merchantBreakdown[merchant].successful / merchantBreakdown[merchant].total * 100).toFixed(2) + '%' 
        : '0%'
    })),
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç–∏
    isMultiCurrency: Object.keys(currencyBreakdown).length > 1,
    currencyCount: Object.keys(currencyBreakdown).length,
    merchantCount: Object.keys(merchantBreakdown).length
  }
} 