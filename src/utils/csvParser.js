// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –∑–∞–ø–∏—Å–µ–π
function detectRecordSeparator(text) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –∑–∞–ø–∏—Å–µ–π
  const separators = ['\n', '\r\n', '\r']
  
  for (const sep of separators) {
    const lines = text.split(sep)
    if (lines.length > 1) {
      console.log(`Found record separator: ${JSON.stringify(sep)}, lines: ${lines.length}`)
      return sep
    }
  }
  
  return '\n' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
function determineTransactionType(method, amount) {
  if (!method && amount === 0) return 'unknown'
  
  const methodLower = (method || '').toLowerCase()
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –º–µ—Ç–æ–¥—É
  if (methodLower.includes('deposit') || methodLower.includes('in') || methodLower.includes('–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')) {
    return 'Deposit'
  }
  if (methodLower.includes('withdraw') || methodLower.includes('out') || methodLower.includes('–≤—ã–≤–æ–¥')) {
    return 'Withdraw'
  }
  
  // –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –ø–æ –º–µ—Ç–æ–¥—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É
  if (amount > 0) return 'Deposit'
  if (amount < 0) return 'Withdraw'
  
  return 'unknown'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —Å–≤–µ—Ä–∫–∏
function normalizeStatus(status) {
  const statusLower = (status || '').toLowerCase()
  
  // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: success (platform) <-> completed (merchant)
  if (statusLower === 'success') return 'completed'
  if (statusLower === 'failed' || statusLower === 'error') return 'failed'  
  if (statusLower === 'pending' || statusLower === 'processing' || statusLower === 'in progress') return 'pending'
  if (statusLower === 'cancelled' || statusLower === 'canceled') return 'canceled'
  
  return statusLower // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
function normalizeData(data, format, dataType = 'merchant') {
  console.log('üîÑ NORMALIZING DATA - Type:', dataType, 'Records:', data.length)
  
  if (dataType === 'platform') {
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    console.log('üè¶ Normalizing platform data:', data.length, 'records')
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if (data.length > 0) {
      console.log('üîç First platform record raw:', data[0])
    }
    return data.map(row => ({
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      userId: row['User ID'] || '',
      operationId: row['Operation ID'] || '',
      status: row['Status'] || '',
      foreignOperationId: row['Foreign Operation Id'] || '', // –ö–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–≤–µ—Ä–∫–∏
      clientOperationId: row['Client Operation ID'] || '',
      referenceId: row['Reference ID'] || '',
      createdAt: row['Created At'] || '',
      method: row['Method'] || '',
      
      // –°—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã
      initialAmount: parseFloat((row['Initial Amount'] || '0').replace(',', '.')) || 0,
      initialCurrency: row['Initial Currency'] || 'TRY',
      resultAmount: parseFloat((row['Result Amount'] || '0').replace(',', '.')) || 0,
      resultCurrency: row['Result Currency'] || 'TRY',
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      code: row['Code'] || '',
      message: row['Message'] || '',
      details: row['Details'] || '',
      paymentChannelName: row['Payment Channel Name'] || '',
      originalErrorMessage: row['Original Error Message'] || '',
      endpoint: row['Endpoint'] || '',
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π
      id: row['Foreign Operation Id'] || row['Operation ID'] || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º Foreign Operation Id –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π ID
      trackingId: row['Foreign Operation Id'] || '', // –î–ª—è —Å–≤–µ—Ä–∫–∏ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
      amount: parseFloat((row['Result Amount'] || row['Initial Amount'] || '0').replace(',', '.')) || 0,
      currency: row['Result Currency'] || row['Initial Currency'] || 'TRY',
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      debugInfo: {
        hasForeignOpId: !!row['Foreign Operation Id'],
        hasResultAmount: !!row['Result Amount'],
        hasInitialAmount: !!row['Initial Amount'],
        originalStatus: row['Status']
      },
      
      // –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –º–µ—Ç–æ–¥–∞ –∏–ª–∏ —Å—É–º–º—ã)
      type: determineTransactionType(row['Method'], parseFloat((row['Result Amount'] || row['Initial Amount'] || '0').replace(',', '.'))),
      transactionType: determineTransactionType(row['Method'], parseFloat((row['Result Amount'] || row['Initial Amount'] || '0').replace(',', '.'))),
      
      // –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ - –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è —Å–≤–µ—Ä–∫–∏
      normalizedStatus: normalizeStatus(row['Status'] || ''),
      isCompleted: (row['Status'] || '').toLowerCase() === 'success',
      isFailed: (row['Status'] || '').toLowerCase() === 'failed' || (row['Status'] || '').toLowerCase() === 'error',
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      dataSource: 'platform',
      originalData: row // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }))
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    const normalizedPlatform = data.map(row => ({
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      userId: row['User ID'] || '',
      operationId: row['Operation ID'] || '',
      status: row['Status'] || '',
      foreignOperationId: row['Foreign Operation Id'] || '', // –ö–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–≤–µ—Ä–∫–∏
      clientOperationId: row['Client Operation ID'] || '',
      referenceId: row['Reference ID'] || '',
      createdAt: row['Created At'] || '',
      method: row['Method'] || '',
      
      // –°—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã
      initialAmount: parseFloat((row['Initial Amount'] || '0').replace(',', '.')) || 0,
      initialCurrency: row['Initial Currency'] || 'TRY',
      resultAmount: parseFloat((row['Result Amount'] || '0').replace(',', '.')) || 0,
      resultCurrency: row['Result Currency'] || 'TRY',
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      code: row['Code'] || '',
      message: row['Message'] || '',
      details: row['Details'] || '',
      paymentChannelName: row['Payment Channel Name'] || '',
      originalErrorMessage: row['Original Error Message'] || '',
      endpoint: row['Endpoint'] || '',
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π
      id: row['Foreign Operation Id'] || row['Operation ID'] || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º Foreign Operation Id –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π ID
      trackingId: row['Foreign Operation Id'] || '', // –î–ª—è —Å–≤–µ—Ä–∫–∏ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
      amount: parseFloat((row['Result Amount'] || row['Initial Amount'] || '0').replace(',', '.')) || 0,
      currency: row['Result Currency'] || row['Initial Currency'] || 'TRY',
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      debugInfo: {
        hasForeignOpId: !!row['Foreign Operation Id'],
        hasResultAmount: !!row['Result Amount'],
        hasInitialAmount: !!row['Initial Amount'],
        originalStatus: row['Status']
      },
      
      // –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –º–µ—Ç–æ–¥–∞ –∏–ª–∏ —Å—É–º–º—ã)
      type: determineTransactionType(row['Method'], parseFloat((row['Result Amount'] || row['Initial Amount'] || '0').replace(',', '.'))),
      transactionType: determineTransactionType(row['Method'], parseFloat((row['Result Amount'] || row['Initial Amount'] || '0').replace(',', '.'))),
      
      // –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ - –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è —Å–≤–µ—Ä–∫–∏
      normalizedStatus: normalizeStatus(row['Status'] || ''),
      isCompleted: (row['Status'] || '').toLowerCase() === 'success',
      isFailed: (row['Status'] || '').toLowerCase() === 'failed' || (row['Status'] || '').toLowerCase() === 'error',
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      dataSource: 'platform',
      originalData: row // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }))
    
    console.log('üè¶ Platform normalization complete. Sample record:', normalizedPlatform[0])
    console.log('üè¶ Key fields for reconciliation:')
    console.log('üè¶ - foreignOperationId:', normalizedPlatform[0]?.foreignOperationId)
    console.log('üè¶ - status:', normalizedPlatform[0]?.status)
    console.log('üè¶ - normalizedStatus:', normalizedPlatform[0]?.normalizedStatus)
    
    return normalizedPlatform
  } else if (dataType === 'merchant') {
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    console.log('üè™ Normalizing merchant data:', data.length, 'records')
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if (data.length > 0) {
      console.log('üîç First merchant record raw:', data[0])
    }
    
    const normalizedMerchant = data.map(row => ({
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      id: row['Tracking Id'] || row['–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è'] || row['Tracking ID'] || row['ID'] || '',
      status: row['Status'] || row['–°—Ç–∞—Ç—É—Å'] || '',
      amount: parseFloat((row['Amount'] || row['Transaction amount'] || row['–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'] || row['–°—É–º–º–∞'] || '0').replace(',', '.')) || 0,
      type: row['Type'] || row['–¢–∏–ø'] || '',
      company: row['Company'] || row['–ö–æ–º–ø–∞–Ω–∏—è'] || '',
      fee: parseFloat((row['Fee'] || row['–ö–æ–º–∏—Å—Å–∏—è'] || '0').replace(',', '.')) || 0,
      feeRatio: row['Fee Ratio'] || '0%',
      
      // –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      transactionType: row['Type'] || row['–¢–∏–ø'] || '',
      isDeposit: (row['Type'] || row['–¢–∏–ø'] || '').toLowerCase() === 'deposit',
      isWithdraw: (row['Type'] || row['–¢–∏–ø'] || '').toLowerCase() === 'withdraw',
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      userName: row['User name'] || row['–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'] || row['Username'] || row['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'] || '',
      userId: row['User ƒ±d'] || row['User id'] || row['–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'] || row['User ID'] || '',
      fullName: row['Name'] || row['–ò–º—è'] || row['Full Name'] || '',
      
      // –í—Ä–µ–º—è
      createdAt: row['Creation time'] || row['–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è'] || row['Created At'] || row['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] || '',
      processedAt: row['Processed time'] || row['–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'] || row['Processed At'] || '',
      
      // –ü–ª–∞—Ç–µ–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      paymentMethod: row['Payment method'] || row['–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã'] || row['Payment Method'] || row['–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'] || '',
      paymentGateway: row['Payment Gateway'] || '',
      recipientName: row['Receiver Account Name'] || row['–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è'] || row['Recipient Name'] || '',
      recipientAccount: row['Receiver Account Number'] || row['–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è'] || row['Recipient Account'] || '',
      
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      hash: row['Hash code'] || row['–•—ç—à-–∫–æ–¥'] || row['Hash'] || '',
      ipAddress: row['Client Ip address'] || row['IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞'] || row['IP Address'] || '',
      receipt: row['Receipt'] || row['–ö–≤–∏—Ç–∞–Ω—Ü–∏—è'] || '',
      explanation: row['Explanation'] || row['–û–±—ä—è—Å–Ω–µ–Ω–∏–µ'] || '',
      explanationType: row['[Explanation type]'] || row['Explanation Type'] || '',
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      linkId: row['Reference Id'] || row['–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Å—ã–ª–∫–∏'] || row['Link ID'] || '',
      
      // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
      isCompleted: (row['Status'] || row['–°—Ç–∞—Ç—É—Å'] || '').toLowerCase() === 'completed',
      isCanceled: (row['Status'] || row['–°—Ç–∞—Ç—É—Å'] || '').toLowerCase() === 'canceled',
      isFailed: (row['Status'] || row['–°—Ç–∞—Ç—É—Å'] || '').toLowerCase() === 'failed',
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã (–≤ TRY –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤)
      amountFormatted: new Intl.NumberFormat('tr-TR', { 
        style: 'currency', 
        currency: 'TRY' 
      }).format(parseFloat((row['Amount'] || row['Transaction amount'] || row['–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'] || row['–°—É–º–º–∞'] || '0').replace(',', '.')) || 0),
      
      feeFormatted: new Intl.NumberFormat('tr-TR', { 
        style: 'currency', 
        currency: 'TRY' 
      }).format(parseFloat((row['Fee'] || row['–ö–æ–º–∏—Å—Å–∏—è'] || '0').replace(',', '.')) || 0),
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–≤–µ—Ä–∫–∏
      trackingId: row['Tracking Id'] || row['–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è'] || row['Tracking ID'] || row['ID'] || '',
      normalizedStatus: (row['Status'] || row['–°—Ç–∞—Ç—É—Å'] || '').toLowerCase(),
      dataSource: 'merchant',
      originalData: row
    }))
    
    console.log('üè™ Merchant normalization complete. Sample record:', normalizedMerchant[0])
    console.log('üè™ Key fields for reconciliation:')
    console.log('üè™ - trackingId:', normalizedMerchant[0]?.trackingId)
    console.log('üè™ - status:', normalizedMerchant[0]?.status)
    console.log('üè™ - normalizedStatus:', normalizedMerchant[0]?.normalizedStatus)
    
    return normalizedMerchant
  } else if (dataType === 'payshack') {
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ Payshack
    console.log('üè™ Normalizing Payshack data:', data.length, 'records')
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if (data.length > 0) {
      console.log('üîç First Payshack record raw:', data[0])
    }
    
    const normalizedPayshack = data.map(row => ({
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è Payshack
      id: row['Transaction Id'] || row['Transaction ID'] || '',
      orderId: row['Order Id'] || row['Order ID'] || '',
      transactionId: row['Transaction Id'] || row['Transaction ID'] || '',
      utr: row['UTR'] || '',
      amount: parseFloat((row['Amount'] || '0').replace(',', '.')) || 0,
      status: row['Status'] || '',
      remarks: row['Remarks'] || '',
      
      // –í—Ä–µ–º—è
      createdAt: row['Created Date'] || row['Created date'] || '',
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π
      trackingId: row['Transaction Id'] || row['Transaction ID'] || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º Transaction Id –∫–∞–∫ tracking ID
      normalizedStatus: normalizeStatus(row['Status'] || ''),
      
      // –°—Ç–∞—Ç—É—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      isCompleted: (row['Status'] || '').toLowerCase() === 'success',
      isFailed: (row['Status'] || '').toLowerCase() === 'failed',
      isInitiated: (row['Status'] || '').toLowerCase() === 'initiated',
      
      // –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ —Å—É–º–º–µ)
      type: determineTransactionType('', parseFloat((row['Amount'] || '0').replace(',', '.'))),
      transactionType: determineTransactionType('', parseFloat((row['Amount'] || '0').replace(',', '.'))),
      isDeposit: parseFloat((row['Amount'] || '0').replace(',', '.')) > 0,
      isWithdraw: parseFloat((row['Amount'] || '0').replace(',', '.')) < 0,
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã (–≤ INR –¥–ª—è Payshack)
      amountFormatted: new Intl.NumberFormat('en-IN', { 
        style: 'currency', 
        currency: 'INR' 
      }).format(parseFloat((row['Amount'] || '0').replace(',', '.')) || 0),
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      currency: 'INR', // Payshack —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ INR
      company: 'Payshack',
      paymentMethod: 'UPI', // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è Payshack
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      dataSource: 'payshack',
      provider: 'payshack',
      originalData: row // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }))
    
    console.log('üè™ Payshack normalization complete. Sample record:', normalizedPayshack[0])
    console.log('üè™ Key fields for reconciliation:')
    console.log('üè™ - transactionId:', normalizedPayshack[0]?.transactionId)
    console.log('üè™ - status:', normalizedPayshack[0]?.status)
    console.log('üè™ - normalizedStatus:', normalizedPayshack[0]?.normalizedStatus)
    
    return normalizedPayshack
  } else {
    // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    console.log('‚ö†Ô∏è Unknown data type, using fallback normalization')
    return data
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
function detectDataFormat(headers) {
  const headerStr = headers.join(' ').toLowerCase()
  console.log('üîç Detecting data format from headers:', headerStr)
  
  // –¢–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const platformHeaders = [
    'user id', 'operation id', 'status', 'foreign operation id', 
    'client operation id', 'reference id', 'created at', 'method',
    'initial amount', 'initial currency', 'result amount', 'result currency',
    'code', 'message', 'details', 'payment channel name', 
    'original error message', 'endpoint'
  ]
  
  // –¢–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Optipay
  const optipayHeaders = [
    'tracking id', 'reference id', 'status', 'payment method', 'payment gateway',
    'amount', 'transaction amount', 'type', 'company', 'fee', 'fee ratio',
    'name', 'user ƒ±d', 'user name', 'creation time', 'processed time',
    'receiver account name', 'receiver account number', 'hash code',
    'client ip address', 'receipt', 'explanation', '[explanation type]'
  ]

  // –¢–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Payshack
  const payshackHeaders = [
    'created date', 'order id', 'transaction id', 'utr', 'amount', 'status', 'remarks'
  ]
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const platformMatchCount = platformHeaders.filter(header => 
    headerStr.includes(header)
  ).length
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º Optipay
  const optipayMatchCount = optipayHeaders.filter(header => 
    headerStr.includes(header)
  ).length

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º Payshack
  const payshackMatchCount = payshackHeaders.filter(header => 
    headerStr.includes(header)
  ).length
  
  console.log('üìä Platform header matches:', platformMatchCount, '/', platformHeaders.length)
  console.log('üìä Optipay header matches:', optipayMatchCount, '/', optipayHeaders.length)
  console.log('üìä Payshack header matches:', payshackMatchCount, '/', payshackHeaders.length)
  
  // –ï—Å–ª–∏ –±–æ–ª—å—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
  if (platformMatchCount > Math.max(optipayMatchCount, payshackMatchCount) && platformMatchCount >= 10) {
    console.log('üìä Detected: Platform format (exact match)')
    return 'platform'
  }
  
  // –ï—Å–ª–∏ –±–æ–ª—å—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å Payshack
  if (payshackMatchCount > Math.max(platformMatchCount, optipayMatchCount) && payshackMatchCount >= 5) {
    console.log('üìä Detected: Payshack format (exact match)')
    return 'payshack'
  }
  
  // –ï—Å–ª–∏ –±–æ–ª—å—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å Optipay
  if (optipayMatchCount > Math.max(platformMatchCount, payshackMatchCount) && optipayMatchCount >= 10) {
    console.log('üìä Detected: Optipay format (exact match)')
    return 'optipay'
  }
  
  // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
  if (headerStr.includes('foreign operation id') || 
      headerStr.includes('client operation id') || 
      headerStr.includes('initial amount') || 
      headerStr.includes('result amount')) {
    console.log('üìä Detected: Platform format (fallback)')
    return 'platform'
  }
  
  if (headerStr.includes('tracking id') || 
      (headerStr.includes('status') && headerStr.includes('amount'))) {
    console.log('üìä Detected: Optipay format (fallback)')
    return 'optipay'
  }

  if (headerStr.includes('transaction id') && headerStr.includes('order id')) {
    console.log('üìä Detected: Payshack format (fallback)')
    return 'payshack'
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º Optipay
  console.log('üìä Default: Optipay format')
  return 'optipay'
}

export function parseCSV(text, dataType = null) {
  console.log('=== CSV PARSER DEBUG ===')
  console.log('Raw text length:', text.length)
  console.log('First 500 chars:', text.substring(0, 500))
  console.log('Last 500 chars:', text.substring(text.length - 500))
  
  try {
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = text.split(/\r?\n/).filter(line => line.trim())
    console.log('Lines found:', lines.length)
    
    if (lines.length === 0) {
      console.error('No lines found in CSV')
      return []
    }
    
    // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headerLine = lines[0].trim()
    console.log('Header line:', headerLine)
    console.log('Header line length:', headerLine.length)
    
    // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    let delimiter = ';'
    if (headerLine.includes(';')) {
      delimiter = ';'
    } else if (headerLine.includes(',')) {
      delimiter = ','
    } else if (headerLine.includes('\t')) {
      delimiter = '\t'
    }
    
    console.log('Using delimiter:', delimiter)
    
    // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = headerLine.split(delimiter).map(h => h.trim().replace(/"/g, ''))
    console.log('Headers count:', headers.length)
    console.log('Headers:', headers)
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Å–≤–µ—Ä–∫–∏
    console.log('üîç HEADER ANALYSIS FOR RECONCILIATION:')
    console.log('üîç All headers (lowercase):', headers.map(h => h.toLowerCase()))
    
    // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–≤–µ—Ä–∫–∏
    const statusFields = headers.filter(h => h.toLowerCase().includes('status'))
    const idFields = headers.filter(h => h.toLowerCase().includes('id') || h.toLowerCase().includes('tracking'))
    const amountFields = headers.filter(h => h.toLowerCase().includes('amount'))
    
    console.log('üîç Status fields found:', statusFields)
    console.log('üîç ID fields found:', idFields)
    console.log('üîç Amount fields found:', amountFields)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    const detectedFormat = detectDataFormat(headers)
    console.log('Detected format:', detectedFormat)
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    let finalDataType = dataType || detectedFormat
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
    if (lines.length === 2 && !dataType) {
      console.log('üîç Detected file with only 2 lines, checking for platform format...')
      const headerStr = headers.join(' ').toLowerCase()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      const platformKeywords = ['foreign operation id', 'client operation id', 'initial amount', 'result amount']
      const platformMatches = platformKeywords.filter(keyword => headerStr.includes(keyword)).length
      
      if (platformMatches >= 2) {
        console.log('üîç Platform keywords found, forcing platform format')
        finalDataType = 'platform'
      }
    }
    
    console.log('Final data type:', finalDataType)
    
    const data = []
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    if (finalDataType === 'platform' && lines.length === 2) {
      console.log('üîß Detected platform file with single data line, processing specially...')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–º–µ—à–∞–ª–∏—Å—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
      if (headers.length > 50) {
        console.log('‚ö†Ô∏è Too many headers detected, likely mixed with data. Attempting to fix...')
        
        // –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        const expectedPlatformHeaders = [
          'User ID', 'Operation ID', 'Status', 'Foreign Operation Id', 'Client Operation ID', 
          'Reference ID', 'Created At', 'Method', 'Initial Amount', 'Initial Currency', 
          'Result Amount', 'Result Currency', 'Code', 'Message', 'Details', 
          'Payment Channel Name', 'Original Error Message', 'Endpoint'
        ]
        
        // –ë–µ—Ä–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–æ–∫—É (–¥–∞–Ω–Ω—ã–µ)
        const dataLine = lines[1].trim()
        console.log('Data line length:', dataLine.length)
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é
        const allValues = dataLine.split(delimiter).map(v => v.trim().replace(/"/g, ''))
        console.log('Total values found:', allValues.length)
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const correctHeaders = expectedPlatformHeaders
        console.log('Using correct headers count:', correctHeaders.length)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –∫—Ä–∞—Ç–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const valuesPerRecord = correctHeaders.length
        const recordCount = Math.floor(allValues.length / valuesPerRecord)
        
        console.log('Values per record:', valuesPerRecord)
        console.log('Calculated record count:', recordCount)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        const remainder = allValues.length % valuesPerRecord
        if (remainder > 0) {
          console.warn('‚ö†Ô∏è Warning: Values count is not perfectly divisible by headers count. Remainder:', remainder)
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏
        for (let i = 0; i < recordCount; i++) {
          const row = {}
          const startIndex = i * valuesPerRecord
          
          correctHeaders.forEach((header, headerIndex) => {
            const valueIndex = startIndex + headerIndex
            if (valueIndex < allValues.length) {
              row[header] = allValues[valueIndex] || ''
            } else {
              row[header] = ''
              console.warn('‚ö†Ô∏è Value index out of bounds:', valueIndex, 'for header:', header)
            }
          })
          
          data.push(row)
        }
        
        console.log('Created records from single line:', data.length)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (data.length > 0) {
          console.log('First record sample:', data[0])
          if (data.length > 1) {
            console.log('Second record sample:', data[1])
          }
        }
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const dataLine = lines[1].trim()
        console.log('Data line length:', dataLine.length)
        
        const allValues = dataLine.split(delimiter).map(v => v.trim().replace(/"/g, ''))
        console.log('Total values found:', allValues.length)
        console.log('Expected headers count:', headers.length)
        
        const valuesPerRecord = headers.length
        const recordCount = Math.floor(allValues.length / valuesPerRecord)
        
        console.log('Values per record:', valuesPerRecord)
        console.log('Calculated record count:', recordCount)
        
        const remainder = allValues.length % valuesPerRecord
        if (remainder > 0) {
          console.warn('‚ö†Ô∏è Warning: Values count is not perfectly divisible by headers count. Remainder:', remainder)
        }
        
        for (let i = 0; i < recordCount; i++) {
          const row = {}
          const startIndex = i * valuesPerRecord
          
          headers.forEach((header, headerIndex) => {
            const valueIndex = startIndex + headerIndex
            if (valueIndex < allValues.length) {
              row[header] = allValues[valueIndex] || ''
            } else {
              row[header] = ''
              console.warn('‚ö†Ô∏è Value index out of bounds:', valueIndex, 'for header:', header)
            }
          })
          
          data.push(row)
        }
        
        console.log('Created records from single line:', data.length)
        
        if (data.length > 0) {
          console.log('First record sample:', data[0])
          if (data.length > 1) {
            console.log('Second record sample:', data[1])
          }
        }
      }
    } else if (finalDataType === 'platform' && lines.length > 2) {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      console.log('üîß Processing platform file with normal structure...')
      
      for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim()
        if (!line) continue
        
        const values = line.split(delimiter).map(v => v.trim().replace(/"/g, ''))
        
        const row = {}
        headers.forEach((header, index) => {
          row[header] = values[index] || ''
        })
        
        data.push(row)
      }
      
      console.log('Processed platform records:', data.length)
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö CSV —Ñ–∞–π–ª–æ–≤
      for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim()
        if (!line) continue
        
        const values = line.split(delimiter).map(v => v.trim().replace(/"/g, ''))
        
        const row = {}
        headers.forEach((header, index) => {
          row[header] = values[index] || ''
        })
        
        data.push(row)
      }
    }
    
    console.log('Parsed data count:', data.length)
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const normalizedData = normalizeData(data, detectedFormat, finalDataType)
    console.log('Normalized data count:', normalizedData.length)
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞—Ç—É—Å–æ–≤
    const statusCounts = {}
    normalizedData.forEach(row => {
      const status = row.status || 'empty'
      statusCounts[status] = (statusCounts[status] || 0) + 1
    })
    
    console.log('Status distribution:', statusCounts)
    
    return normalizedData
    
  } catch (error) {
    console.error('Error parsing CSV:', error)
    return []
  }
} 