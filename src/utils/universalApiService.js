class UniversalApiService {
  constructor() {
    this.baseURL = process.env.NODE_ENV === 'production' 
      ? 'https://your-api-domain.com' 
      : 'http://localhost:3002'
    this.wsURL = process.env.NODE_ENV === 'production' 
      ? 'wss://your-api-domain.com:8080' 
      : 'ws://localhost:8080'
    this.ws = null
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
  async processFile(file, provider = 'optipay', mode = 'auto', onProgress = null) {
    try {
      console.log('üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:', file.name, '–ü—Ä–æ–≤–∞–π–¥–µ—Ä:', provider, '–†–µ–∂–∏–º:', mode)

      const formData = new FormData()
      formData.append('csvFile', file)
      formData.append('provider', provider)
      formData.append('mode', mode)

      const response = await fetch(`${this.baseURL}/api/process`, {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞')
      }

      const result = await response.json()
      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result)

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      if (result.jobId && onProgress) {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...')
        return await this.subscribeToProgress(result.jobId, onProgress)
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
      return result

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error)
      throw error
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ WebSocket
  async subscribeToProgress(jobId, onProgress) {
    return new Promise((resolve, reject) => {
      try {
        this.ws = new WebSocket(this.wsURL)

        this.ws.onopen = () => {
          console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏:', jobId)
          // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
          this.ws.send(JSON.stringify({
            type: 'subscribe',
            jobId: jobId
          }))
        }

        this.ws.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data)
            if (data.jobId === jobId) {
              console.log('üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:', data.progress, '%', data.step)
              
              if (onProgress) {
                onProgress({
                  progress: data.progress,
                  step: data.step,
                  jobId: data.jobId
                })
              }

              // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              if (data.progress >= 100) {
                console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...')
                setTimeout(() => {
                  this.getJobResult(jobId)
                    .then(resolve)
                    .catch(reject)
                }, 1000) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
              }
            }
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', e)
          }
        }

        this.ws.onerror = (error) => {
          console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error)
          reject(new Error('WebSocket connection failed'))
        }

        this.ws.onclose = () => {
          console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω')
        }

        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
        setTimeout(() => {
          if (this.ws && this.ws.readyState !== WebSocket.CLOSED) {
            reject(new Error('Timeout: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'))
          }
        }, 300000) // 5 –º–∏–Ω—É—Ç

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket:', error)
        reject(error)
      }
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏
  async getJobResult(jobId) {
    try {
      console.log('üì• –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏:', jobId)
      
      const response = await fetch(`${this.baseURL}/api/analytics/result/${jobId}`)
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const result = await response.json()
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω:', {
        dataLength: result.data?.length || 0,
        metrics: result.metrics
      })

      return result

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error)
      throw error
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
  async healthCheck() {
    try {
      const response = await fetch(`${this.baseURL}/api/health`)
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`)
      }
      return await response.json()
    } catch (error) {
      console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error)
      throw error
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  disconnect() {
    if (this.ws) {
      this.ws.close()
      this.ws = null
    }
  }
}

export default UniversalApiService 