class UniversalApiService {
  constructor() {
    this.baseURL = process.env.NODE_ENV === 'production' 
      ? 'https://your-api-domain.com' 
      : 'http://localhost:3002'
    this.wsURL = process.env.NODE_ENV === 'production' 
      ? 'wss://your-api-domain.com:8080' 
      : 'ws://localhost:8080'
    this.ws = null
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    this.providerConfig = {
      payshack: {
        name: 'Payshack',
        currency: 'INR',
        country: 'India',
        flag: 'üáÆüá≥',
        expectedColumns: ['Transaction Id', 'Status', 'Amount', 'Created Date', 'Payment Method'],
        statusMapping: {
          'success': 'completed',
          'initiated': 'pending', 
          'failed': 'failed',
          'cancelled': 'cancelled'
        }
      },
      optipay: {
        name: 'Optipay',
        currency: 'TRY',
        country: 'Turkey',
        flag: 'üáπüá∑',
        expectedColumns: ['Tracking Id', 'Status', 'Amount', 'Creation time', 'Payment method', 'Company'],
        statusMapping: {
          'completed': 'completed',
          'in progress': 'pending',
          'failed': 'failed',
          'canceled': 'cancelled'
        }
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  getProviderConfig(provider) {
    const config = this.providerConfig[provider]
    if (!config) {
      console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.`)
      return {
        name: provider,
        currency: 'USD',
        country: 'Unknown',
        flag: 'üåç',
        expectedColumns: [],
        statusMapping: {}
      }
    }
    return config
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  async validateFileForProvider(file, provider) {
    return new Promise((resolve, reject) => {
      const config = this.getProviderConfig(provider)
      const reader = new FileReader()
      
      reader.onload = (e) => {
        try {
          const text = e.target.result
          const lines = text.split('\n')
          const header = lines[0]
          
          if (!header) {
            reject(new Error('–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤'))
            return
          }
          
          console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider}:`)
          console.log(`üìã –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: ${config.expectedColumns.join(', ')}`)
          console.log(`üìÑ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: ${header}`)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
          const hasRequiredColumns = config.expectedColumns.some(expectedCol => 
            header.toLowerCase().includes(expectedCol.toLowerCase())
          )
          
          if (!hasRequiredColumns && config.expectedColumns.length > 0) {
            console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è ${provider}`)
            // –ù–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º, –∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º - –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–∞–ª–∏–¥–Ω—ã–π
          }
          
          resolve({
            isValid: true,
            lineCount: lines.length - 1, // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            headerColumns: header.split(',').map(col => col.trim()),
            providerConfig: config
          })
          
        } catch (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`))
        }
      }
      
      reader.onerror = () => {
        reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'))
      }
      
      // –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 1KB –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const slice = file.slice(0, 1024)
      reader.readAsText(slice)
    })
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  async processFile(file, provider = 'optipay', mode = 'auto', onProgress = null) {
    try {
      console.log(`üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:`, {
        fileName: file.name,
        fileSize: `${(file.size / (1024 * 1024)).toFixed(2)}MB`,
        provider: provider,
        mode: mode
      })

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const validation = await this.validateFileForProvider(file, provider)
      console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:`, validation)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
      if (onProgress) {
        onProgress({
          progress: 5,
          step: `–§–∞–π–ª –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${validation.providerConfig.name}`,
          provider: provider,
          validation: validation
        })
      }

      const formData = new FormData()
      formData.append('csvFile', file)
      formData.append('provider', provider)
      formData.append('mode', mode)
      formData.append('validation', JSON.stringify(validation))

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...`)
      if (onProgress) {
        onProgress({
          progress: 10,
          step: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...',
          provider: provider
        })
      }

      const response = await fetch(`${this.baseURL}/api/process`, {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`)
      }

      const result = await response.json()
      console.log(`‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, {
        jobId: result.jobId,
        mode: result.mode,
        hasData: !!result.data,
        dataLength: result.data?.length || 0
      })

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      if (result.jobId && onProgress) {
        console.log(`üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏: ${result.jobId}`)
        return await this.subscribeToProgress(result.jobId, onProgress, provider)
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
      if (result.data) {
        // –û–±–æ–≥–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        result.providerConfig = validation.providerConfig
        result.provider = provider
        
        if (result.metrics) {
          result.metrics.provider = provider
          result.metrics.currency = validation.providerConfig.currency
          result.metrics.providerConfig = validation.providerConfig
        }
      }

      return result

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider}:`, error)
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`)
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ WebSocket —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  async subscribeToProgress(jobId, onProgress, provider) {
    return new Promise((resolve, reject) => {
      try {
        console.log(`üîå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId} (–ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider})`)
        this.ws = new WebSocket(this.wsURL)

        this.ws.onopen = () => {
          console.log(`‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏: ${jobId}`)
          // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
          this.ws.send(JSON.stringify({
            type: 'subscribe',
            jobId: jobId,
            provider: provider
          }))
        }

        this.ws.onmessage = (event) => {
          try {
            const data = JSON.parse(event.data)
            if (data.jobId === jobId) {
              console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å ${provider}:`, data.progress, '%', data.step || data.stage)
              
              if (onProgress) {
                onProgress({
                  progress: data.progress,
                  step: data.step || data.stage,
                  jobId: data.jobId,
                  provider: provider,
                  metrics: data.metrics
                })
              }

              // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              if (data.progress >= 100 || data.completed) {
                console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${provider} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...`)
                setTimeout(() => {
                  this.getJobResult(jobId, provider)
                    .then(resolve)
                    .catch(reject)
                }, 1000) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
              }
              
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
              if (data.error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${provider}:`, data.error)
                reject(new Error(data.error))
              }
            }
          } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', e)
          }
        }

        this.ws.onerror = (error) => {
          console.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞ –¥–ª—è ${provider}:`, error)
          reject(new Error(`WebSocket connection failed –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider}`))
        }

        this.ws.onclose = () => {
          console.log(`üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ ${jobId}`)
        }

        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è (—É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
        setTimeout(() => {
          if (this.ws && this.ws.readyState !== WebSocket.CLOSED) {
            this.disconnect()
            reject(new Error(`Timeout: –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${provider} –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (>10 –º–∏–Ω—É—Ç)`))
          }
        }, 600000) // 10 –º–∏–Ω—É—Ç

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket –¥–ª—è ${provider}:`, error)
        reject(error)
      }
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  async getJobResult(jobId, provider = null) {
    try {
      console.log(`üì• –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏: ${jobId} (–ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider || 'unknown'})`)
      
      const response = await fetch(`${this.baseURL}/api/analytics/job/${jobId}/results`)
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const result = await response.json()
      
      // –û–±–æ–≥–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
      if (provider && this.providerConfig[provider]) {
        result.providerConfig = this.providerConfig[provider]
        result.provider = provider
        
        if (result.metrics) {
          result.metrics.provider = provider
          result.metrics.currency = this.providerConfig[provider].currency
          result.metrics.providerConfig = this.providerConfig[provider]
        }
      }
      
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω:`, {
        dataLength: result.data?.length || 0,
        provider: result.provider || provider,
        currency: result.metrics?.currency,
        processingTime: result.processingTime
      })

      return result

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è ${provider}:`, error)
      throw error
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
  async healthCheck() {
    try {
      const response = await fetch(`${this.baseURL}/api/health`)
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`)
      }
      return await response.json()
    } catch (error) {
      console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error)
      throw error
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  disconnect() {
    if (this.ws) {
      this.ws.close()
      this.ws = null
    }
  }
}

export default UniversalApiService 