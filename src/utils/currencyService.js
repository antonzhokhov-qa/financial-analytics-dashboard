/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç exchangerate-api.com (1500 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü)
 */

class CurrencyService {
  constructor() {
    this.baseUrl = 'https://api.exchangerate-api.com/v4/latest'
    this.cache = new Map()
    this.cacheTimeout = 60 * 60 * 1000 // 1 —á–∞—Å –∫—ç—à
    this.fallbackRates = {
      'EUR': 1.09,    // 1 EUR = 1.09 USD
      'TRY': 0.033,   // 1 TRY = 0.033 USD  
      'INR': 0.012,   // 1 INR = 0.012 USD
      'GBP': 1.27,    // 1 GBP = 1.27 USD
      'RUB': 0.011,   // 1 RUB = 0.011 USD
      'UAH': 0.027,   // 1 UAH = 0.027 USD
      'BRL': 0.20,    // 1 BRL = 0.20 USD
      'PLN': 0.25,    // 1 PLN = 0.25 USD
      'CZK': 0.044    // 1 CZK = 0.044 USD
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∫ USD
   * @param {string} currency - –ö–æ–¥ –≤–∞–ª—é—Ç—ã (EUR, TRY, INR, etc)
   * @returns {Promise<number>} - –ö—É—Ä—Å –∫ USD
   */
  async getUSDRate(currency) {
    if (currency === 'USD') return 1

    const cacheKey = `USD_${currency}`
    const cached = this.cache.get(cacheKey)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (cached && (Date.now() - cached.timestamp) < this.cacheTimeout) {
      console.log(`üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å ${currency}: ${cached.rate}`)
      return cached.rate
    }

    try {
      console.log(`üåê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å ${currency} –∫ USD...`)
      const response = await fetch(`${this.baseUrl}/USD`)
      const data = await response.json()
      
      if (data.rates && data.rates[currency]) {
        const apiRate = data.rates[currency] // –°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü –≤–∞–ª—é—Ç—ã –∑–∞ 1 USD
        const usdRate = 1 / apiRate // –°–∫–æ–ª—å–∫–æ USD –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.cache.set(cacheKey, {
          rate: usdRate,
          timestamp: Date.now()
        })
        
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –∫—É—Ä—Å ${currency}: 1 ${currency} = ${usdRate.toFixed(4)} USD (API rate: ${apiRate})`)
        return usdRate
      } else {
        console.warn(`‚ö†Ô∏è –ö—É—Ä—Å ${currency} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`)
        return this.fallbackRates[currency] || 1
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ ${currency}:`, error)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫—É—Ä—Å—ã
      const fallbackRate = this.fallbackRates[currency] || 1
      console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫—É—Ä—Å ${currency}: ${fallbackRate}`)
      return fallbackRate
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –≤ USD
   * @param {number} amount - –°—É–º–º–∞
   * @param {string} fromCurrency - –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
   * @returns {Promise<number>} - –°—É–º–º–∞ –≤ USD
   */
  async convertToUSD(amount, fromCurrency) {
    if (!amount || amount === 0) return 0
    if (fromCurrency === 'USD') return amount

    const rate = await this.getUSDRate(fromCurrency)
    const usdAmount = amount * rate
    
    console.log(`üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${amount} ${fromCurrency} = ${usdAmount.toFixed(2)} USD (–∫—É—Ä—Å: ${rate})`)
    return usdAmount
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ USD
   * @param {Array} operations - –ú–∞—Å—Å–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—è–º–∏ amount –∏ currency
   * @returns {Promise<Array>} - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ USD –ø–æ–ª—è–º–∏
   */
  async convertOperationsToUSD(operations) {
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é ${operations.length} –æ–ø–µ—Ä–∞—Ü–∏–π –≤ USD...`)
    
    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    const uniqueCurrencies = [...new Set(operations.map(op => op.currency).filter(Boolean))]
    console.log(`üí∞ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:`, uniqueCurrencies)
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã
    const ratesPromises = uniqueCurrencies.map(currency => 
      this.getUSDRate(currency).then(rate => ({ currency, rate }))
    )
    
    const rates = await Promise.all(ratesPromises)
    const ratesMap = rates.reduce((acc, { currency, rate }) => {
      acc[currency] = rate
      return acc
    }, {})
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã:`, ratesMap)
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
    const convertedOperations = operations.map(operation => {
      const currency = operation.currency || 'USD'
      const amount = parseFloat(operation.amount) || 0
      const rate = ratesMap[currency] || 1
      const usdAmount = currency === 'USD' ? amount : amount * rate
      
      return {
        ...operation,
        usdAmount: usdAmount,
        usdAmountFormatted: new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
          minimumFractionDigits: 2,
          maximumFractionDigits: 2
        }).format(usdAmount),
        exchangeRate: rate,
        originalAmount: amount
      }
    })
    
    console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–≤—ã–µ 3 –æ–ø–µ—Ä–∞—Ü–∏–∏:`, convertedOperations.slice(0, 3))
    return convertedOperations
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç–∞—Ö
   * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞–ª—é—Ç–∞—Ö
   */
  async getSupportedCurrencies() {
    try {
      const response = await fetch(`${this.baseUrl}/USD`)
      const data = await response.json()
      return data.rates || {}
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç:', error)
      return this.fallbackRates
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∫—É—Ä—Å–æ–≤
   */
  clearCache() {
    this.cache.clear()
    console.log('üóëÔ∏è –ö—ç—à –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—á–∏—â–µ–Ω')
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
   */
  getCacheStats() {
    const now = Date.now()
    const validEntries = Array.from(this.cache.entries()).filter(
      ([key, value]) => (now - value.timestamp) < this.cacheTimeout
    )
    
    return {
      totalEntries: this.cache.size,
      validEntries: validEntries.length,
      expiredEntries: this.cache.size - validEntries.length,
      cacheTimeout: this.cacheTimeout / 1000 / 60 + ' –º–∏–Ω—É—Ç'
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const currencyService = new CurrencyService()

export default currencyService