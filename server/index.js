const express = require('express')
const multer = require('multer')
const cors = require('cors')
const csv = require('csv-parser')
const fs = require('fs')
const path = require('path')
const { Worker } = require('worker_threads')
const WebSocket = require('ws')

const app = express()
const PORT = process.env.PORT || 3002

// Middleware
app.use(cors())
app.use(express.json())

// WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
const wss = new WebSocket.Server({ port: 8080 })

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
const jobs = new Map()

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = path.join(__dirname, 'uploads')
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true })
    }
    cb(null, uploadDir)
  },
  filename: (req, file, cb) => {
    const uniqueName = `${Date.now()}-${Math.round(Math.random() * 1E9)}-${file.originalname}`
    cb(null, uniqueName)
  }
})

const upload = multer({ 
  storage,
  limits: { 
    fileSize: 100 * 1024 * 1024 // 100MB
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype === 'text/csv' || file.originalname.toLowerCase().endsWith('.csv')) {
      cb(null, true)
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'))
    }
  }
})

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –∑–∞–¥–∞—á
function generateJobId() {
  return `job_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ WebSocket
function broadcastProgress(jobId, progress) {
  const message = JSON.stringify({ jobId, progress })
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(message)
    }
  })
}

// API endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV
app.post('/api/analytics/upload', upload.single('csvFile'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' })
    }

    const { provider = 'optipay' } = req.body
    const jobId = generateJobId()
    const filePath = req.file.path

    console.log(`üöÄ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ${jobId}, —Ñ–∞–π–ª: ${req.file.originalname}, –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`)

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–¥–∞—á–µ
    jobs.set(jobId, {
      id: jobId,
      status: 'processing',
      fileName: req.file.originalname,
      fileSize: req.file.size,
      provider,
      startTime: new Date(),
      progress: 0,
      stage: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...'
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å ID –∑–∞–¥–∞—á–∏
    res.json({
      jobId,
      status: 'processing',
      message: '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞'
    })

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
    processCSVFile(jobId, filePath, provider)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error)
    res.status(500).json({ error: error.message })
  }
})

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
app.get('/api/analytics/job/:jobId/status', (req, res) => {
  const { jobId } = req.params
  const job = jobs.get(jobId)

  if (!job) {
    return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
  }

  res.json(job)
})

// API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
app.get('/api/analytics/job/:jobId/results', (req, res) => {
  const { jobId } = req.params
  const { page = 1, limit = 100 } = req.query
  
  const job = jobs.get(jobId)
  if (!job || job.status !== 'completed') {
    return res.status(404).json({ error: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤—ã' })
  }

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const startIndex = (page - 1) * limit
  const endIndex = startIndex + parseInt(limit)
  
  const paginatedData = job.results.data.slice(startIndex, endIndex)
  
  res.json({
    data: paginatedData,
    pagination: {
      page: parseInt(page),
      limit: parseInt(limit),
      total: job.results.data.length,
      totalPages: Math.ceil(job.results.data.length / limit)
    },
    metrics: job.results.metrics,
    processingTime: job.processingTime
  })
})

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Ñ–∞–π–ª–∞
async function processCSVFile(jobId, filePath, provider) {
  const job = jobs.get(jobId)
  
  try {
    broadcastProgress(jobId, { stage: '–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...', progress: 10 })
    job.stage = '–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...'
    job.progress = 10

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const totalLines = await countLines(filePath)
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${totalLines}`)

    broadcastProgress(jobId, { stage: '–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...', progress: 20 })
    job.stage = '–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...'
    job.progress = 20

    const data = []
    let processedLines = 0

    // –ü–æ—Ç–æ–∫–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ CSV
    const stream = fs.createReadStream(filePath)
      .pipe(csv())
      .on('data', (row) => {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        const normalizedRow = normalizeDataRow(row, provider)
        data.push(normalizedRow)
        
        processedLines++
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 —Å—Ç—Ä–æ–∫
        if (processedLines % 1000 === 0) {
          const progress = Math.min(20 + (processedLines / totalLines) * 60, 80)
          broadcastProgress(jobId, { 
            stage: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedLines} –∏–∑ ${totalLines} –∑–∞–ø–∏—Å–µ–π...`, 
            progress 
          })
          job.progress = progress
          job.stage = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedLines} –∏–∑ ${totalLines} –∑–∞–ø–∏—Å–µ–π...`
        }
      })
      .on('end', async () => {
        console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${data.length} –∑–∞–ø–∏—Å–µ–π`)
        
        broadcastProgress(jobId, { stage: '–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...', progress: 85 })
        job.stage = '–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...'
        job.progress = 85

        // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        const metrics = calculateAdvancedMetrics(data, provider)
        
        broadcastProgress(jobId, { stage: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...', progress: 95 })
        job.stage = '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...'
        job.progress = 95

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        job.status = 'completed'
        job.progress = 100
        job.stage = '–ì–æ—Ç–æ–≤–æ'
        job.endTime = new Date()
        job.processingTime = job.endTime - job.startTime
        job.results = {
          data,
          metrics,
          totalRecords: data.length
        }

        broadcastProgress(jobId, { 
          stage: '–ì–æ—Ç–æ–≤–æ!', 
          progress: 100,
          completed: true,
          metrics: metrics
        })

        // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ —á–∞—Å
        setTimeout(() => {
          fs.unlink(filePath, (err) => {
            if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err)
            else console.log(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${filePath}`)
          })
        }, 60 * 60 * 1000)

        console.log(`üéâ –ó–∞–¥–∞—á–∞ ${jobId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${job.processingTime}–º—Å`)
      })
      .on('error', (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${jobId}:`, error)
        job.status = 'failed'
        job.error = error.message
        broadcastProgress(jobId, { 
          stage: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', 
          progress: 0, 
          error: error.message 
        })
      })

  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ ${jobId}:`, error)
    job.status = 'failed'
    job.error = error.message
    broadcastProgress(jobId, { 
      stage: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', 
      progress: 0, 
      error: error.message 
    })
  }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
function countLines(filePath) {
  return new Promise((resolve, reject) => {
    let lineCount = 0
    fs.createReadStream(filePath)
      .on('data', (buffer) => {
        let idx = -1
        lineCount-- // Because the loop will run once for idx=-1
        do {
          idx = buffer.indexOf(10, idx + 1)
          lineCount++
        } while (idx !== -1)
      })
      .on('end', () => resolve(lineCount))
      .on('error', reject)
  })
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
function normalizeDataRow(row, provider) {
  const cleanRow = {}
  
  // –û—á–∏—â–∞–µ–º BOM —Å–∏–º–≤–æ–ª—ã –∏–∑ –∫–ª—é—á–µ–π
  Object.keys(row).forEach(key => {
    const cleanKey = key.replace(/^\uFEFF/, '').trim()
    cleanRow[cleanKey] = row[key]
  })

  if (provider === 'payshack') {
    return {
      trackingId: cleanRow['Transaction Id'] || cleanRow['Order Id'] || '',
      status: cleanRow['Status'] || '',
      amount: parseFloat(cleanRow['Amount']) || 0,
      createdAt: cleanRow['Created Date'] || '',
      paymentMethod: cleanRow['Payment Method'] || '',
      currency: 'INR',
      provider: 'payshack',
      originalData: cleanRow
    }
  } else {
    // Optipay —Ñ–æ—Ä–º–∞—Ç
    return {
      trackingId: cleanRow['Tracking Id'] || '',
      status: cleanRow['Status'] || '',
      amount: parseFloat(cleanRow['Amount']) || 0,
      createdAt: cleanRow['Creation time'] || '',
      paymentMethod: cleanRow['Payment method'] || '',
      company: cleanRow['Company'] || '',
      currency: 'TRY',
      provider: 'optipay',
      originalData: cleanRow
    }
  }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
function calculateAdvancedMetrics(data, provider) {
  const total = data.length
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
  const isSuccessful = (row) => {
    const status = row.status.toLowerCase()
    return provider === 'payshack' ? status === 'success' : status === 'completed'
  }
  
  const isFailed = (row) => {
    const status = row.status.toLowerCase()
    return provider === 'payshack' ? status === 'failed' : status === 'failed'
  }
  
  const isPending = (row) => {
    const status = row.status.toLowerCase()
    return provider === 'payshack' ? 
      (status === 'initiated' || status === 'pending') : 
      (status === 'in progress' || status === 'pending')
  }

  const successful = data.filter(isSuccessful).length
  const failed = data.filter(isFailed).length
  const pending = data.filter(isPending).length
  const canceled = data.filter(row => row.status.toLowerCase() === 'canceled').length

  const successfulRevenue = data.filter(isSuccessful)
    .reduce((sum, row) => sum + row.amount, 0)
  
  const totalRevenue = data.reduce((sum, row) => sum + row.amount, 0)
  
  const conversionRate = total > 0 ? (successful / total) * 100 : 0

  // –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const timeAnalysis = analyzeByTime(data)
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
  const paymentMethodStats = analyzeByPaymentMethod(data, isSuccessful, isFailed, isPending)

  return {
    total,
    successful,
    failed,
    pending,
    canceled,
    conversionRate,
    successfulRevenue,
    totalRevenue,
    averageAmount: total > 0 ? totalRevenue / total : 0,
    provider,
    timeAnalysis,
    paymentMethodStats,
    currency: provider === 'payshack' ? 'INR' : 'TRY'
  }
}

// –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
function analyzeByTime(data) {
  const hourlyStats = {}
  const dailyStats = {}
  
  data.forEach(row => {
    if (row.createdAt) {
      try {
        const date = new Date(row.createdAt)
        const hour = date.getHours()
        const day = date.toISOString().split('T')[0]
        
        // –ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if (!hourlyStats[hour]) {
          hourlyStats[hour] = { count: 0, revenue: 0 }
        }
        hourlyStats[hour].count++
        hourlyStats[hour].revenue += row.amount
        
        // –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if (!dailyStats[day]) {
          dailyStats[day] = { count: 0, revenue: 0 }
        }
        dailyStats[day].count++
        dailyStats[day].revenue += row.amount
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞—Ç—ã
      }
    }
  })
  
  return { hourlyStats, dailyStats }
}

// –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
function analyzeByPaymentMethod(data, isSuccessful, isFailed, isPending) {
  const stats = {}
  
  data.forEach(row => {
    const method = row.paymentMethod || 'Unknown'
    if (!stats[method]) {
      stats[method] = { total: 0, successful: 0, failed: 0, pending: 0, revenue: 0 }
    }
    
    stats[method].total++
    stats[method].revenue += row.amount
    
    if (isSuccessful(row)) stats[method].successful++
    else if (isFailed(row)) stats[method].failed++
    else if (isPending(row)) stats[method].pending++
  })
  
  return stats
}

// WebSocket –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
wss.on('connection', (ws) => {
  console.log('üîå WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω')
  
  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message)
      if (data.type === 'subscribe' && data.jobId) {
        ws.jobId = data.jobId
        console.log(`üì° –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∑–∞–¥–∞—á—É: ${data.jobId}`)
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', e)
    }
  })
  
  ws.on('close', () => {
    console.log('üîå WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω')
  })
})

// Health check
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    activeJobs: jobs.size 
  })
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ Analytics API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
  console.log(`üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080`)
  console.log(`üìä –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–∏—Ö CSV —Ñ–∞–π–ª–æ–≤!`)
}) 